@model MyPawDiaryApp.Models.FeedViewModel

@{
    ViewBag.Title = "Today's Activities Feed";
}

<div class="container mt-4">
    <h2 class="mb-4">@ViewBag.Title</h2>

    @Html.AntiForgeryToken()

    @if (!Model.Pets.Any())
    {
        <p>You have no pets added yet.</p>
    }
    else
    {
        <div class="row">
            <!-- Today's Activities Column -->
            <div class="col-md-8">
                <div class="row">
                    @foreach (var pet in Model.Pets)
                    {
                        <div class="col-md-6">
                            <div class="card mb-4 shadow-sm">
                                @if (!string.IsNullOrEmpty(pet.Photo))
                                {
                                    <img src="@pet.Photo" class="card-img-top" alt="@pet.Name" style="height: 200px; object-fit: cover; object-position: center;">
                                }
                                <div class="card-header bg-primary text-white">
                                    <h4 class="mb-0">@pet.Name's Activities</h4>
                                </div>
                                <div class="card-body">
                                    <!-- Recurring Activities -->
                                    <h5>Recurring Daily Activities</h5>
                                    <ul class="list-group mb-3">
                                        @foreach (var activity in Model.DailyActivities.Where(a => a.PetId == pet.Id))
                                        {
                                            //var completion = activity.Completions.FirstOrDefault(c => c.Date.Date == Model.Today.Date);
                                            //bool isDone = completion != null;

                                            <li class="list-group-item d-flex align-items-center justify-content-between">
                                                <div>
                                                    <input type="checkbox" class="activity-checkbox"
                                                           data-petid="@pet.Id"
                                                           data-activityid="@activity.Id"
                                                           data-activitytype="Daily"
                                                           @(activity.IsDoneToday ? "checked" : "") />
                                                    <span class="ml-2">
                                                        @*<i class="fas fa-@activity.Icon"></i> @activity.Namee*@
                                                        <i class="fas"></i> @activity.Name
                                                    </span>
                                                </div>
                                                <span class="badge bg-success @(activity.IsDoneToday ? "" : "d-none")">Done</span>
                                            </li>
                                        }
                                    </ul>

                                    <!-- Scheduled One-Time Activities -->
                                    <h5>Scheduled Activities for Today</h5>
                                    @{
                                        var todaysActivities = Model.TodayOneTimeActivities
                                            .Where(a => a.PetId == pet.Id)
                                            .OrderBy(a => a.DateAndTime)
                                            .ToList();
                                    }

                                    @if (!todaysActivities.Any())
                                    {
                                        <p class="text-muted">No scheduled activities for today.</p>
                                    }
                                    else
                                    {
                                        <ul class="list-group">
                                            @foreach (var activity in todaysActivities)
                                            {
                                                <li class="list-group-item d-flex align-items-center justify-content-between">
                                                    <div>
                                                        <input type="checkbox" class="activity-checkbox"
                                                               data-petid="@pet.Id"
                                                               data-activityid="@activity.Id"
                                                               data-activitytype="OneTime"
                                                               @(activity.isCompleted ? "checked" : "") />
                                                        <span class="ml-2">
                                                            @*<i class="fas fa-@activity.Icon"></i> @activity.Name*@
                                                            <i class="fas"></i> @activity.Name

                                                            @($" at {activity.DateAndTime:HH:mm}")
                                                            @if (!string.IsNullOrEmpty(activity.Notes))
                                                            {
                                                                <small class="text-muted"> - @activity.Notes</small>
                                                            }
                                                        </span>
                                                    </div>
                                                    <span class="badge bg-success @(activity.isCompleted ? "" : "d-none")">Done</span>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>


            <!-- Tomorrow Preview Column -->
            <div class="col-md-4">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">Upcoming Activities (Tomorrow)</h5>
                    </div>
                    <div class="card-body">
                        @if (!Model.TomorrowOneTimeActivities.Any())
                        {
                            <p class="text-muted">No scheduled activities for tomorrow.</p>
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var activity in Model.TomorrowOneTimeActivities)
                                {
                                    <li class="list-group-item">
                                        @*<i class="fas fa-@activity.Icon"></i> @activity.Pet.Name: @activity.Name*@
                                        <i class="fas"></i> @activity.Pet.Name: @activity.Name
                                        @($" at {activity.DateAndTime:HH:mm}")
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Create Post Modal -->
    <div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                @using (Html.BeginForm("CreatePost", "Feed", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title" id="createPostModalLabel">Create a Post</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="Content" class="form-label">Content</label>
                            <textarea name="Content" class="form-control" placeholder="Write something..." rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="Photo" class="form-label">Photo (optional)</label>
                            <input type="file" name="Photo" id="Photo" class="form-control" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Post</button>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Today's Posts from People You Follow</h3>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createPostModal">
            + Create Post
        </button>
    </div>
    <!-- Today's Posts from People You Follow -->
    <div class="row mt-4">

        <div class="col-12">

            @if (!Model.FriendsPosts.Any())
            {
                <p class="text-muted">No posts from people you follow today.</p>
            }
            else
            {
                foreach (var post in Model.FriendsPosts.OrderByDescending(p => p.CreatedAt))
                {
                    <div class="card mb-3 shadow-sm">
                        <div class="card-header d-flex align-items-center">
                            <img src="@(post.User.ProfilePhotoPath ?? "/images/default-avatar.png")"
                                 alt="@post.User.FirstName"
                                 class="rounded-circle me-2"
                                 style="width:40px; height:40px; object-fit:cover;" />
                            <strong>@post.User.FirstName</strong>
                            <small class="text-muted ms-2">@post.CreatedAt.ToString("HH:mm")</small>
                        </div>
                        <div class="card-body">
                            <p>@post.Caption</p>

                            @if (!string.IsNullOrEmpty(post.PicturePath))
                            {
                                <img src="@post.PicturePath" class="img-fluid rounded" style="max-height:300px; object-fit:cover;" />
                            }
                        </div>
                        
                        <div class="card-footer d-flex align-items-center">
                            <button class="btn btn-sm like-btn me-2 @(post.IsLikedByCurrentUser ? "btn-primary" : "btn-outline-primary")" 
                                    data-postid="@post.Id">
                                👍 @(post.IsLikedByCurrentUser ? "Unlike" : "Like")l
                            </button>
                            <span class="likes-count">@post.LikesCount</span>
                        </div>

                    </div>
                }
            }
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            $(".activity-checkbox").change(function () {
                var checkbox = $(this);
                var petId = checkbox.data("petid");
                var activityId = checkbox.data("activityid");
                var activityType = checkbox.data("activitytype");

                console.log("Checkbox changed!");
                console.log("PetId:", petId);
                console.log("ActivityId:", activityId);
                console.log("ActivityType:", activityType);
                console.log("Is checked:", checkbox.is(":checked"));

                var token = $('input[name="__RequestVerificationToken"]').val();


                $.ajax({
                    url: '@Url.Action("MarkDone", "Feed")',
                    type: 'POST',
                    data: {
                        petId: petId,
                        activityId: activityId,
                        activityType: activityType,
                        __RequestVerificationToken: token
                    },
                    success: function () {
                        console.log("AJAX success!");
                        var badge = checkbox.closest("li").find(".badge");
                        if (checkbox.is(":checked")) {
                            console.log("AJAX success!");

                            badge.removeClass("d-none");
                        } else {
                            console.log("Marking as not done");
                            badge.addClass("d-none");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX error!");
                        console.error("Status:", status);
                        console.error("Error:", error);
                        console.log("Response text:", xhr.responseText);
                        alert("Could not update the activity. Please try again.");
                        // revert checkbox state
                        checkbox.prop("checked", !checkbox.is(":checked"));
                    }
                });
            });

            $(".like-btn").click(function () {
                var btn = $(this);
                var postId = btn.data("postid");
                var token = $('input[name="__RequestVerificationToken"]').val();
                var likesCountSpan = btn.siblings(".likes-count");

                $.ajax({
                    url: '@Url.Action("ToggleLike", "Feed")',
                    type: 'POST',
                    data: { postId: postId, __RequestVerificationToken: token },
                    success: function (data) {
                        // Update button color and text
                        if (data.isLiked) {
                            btn.removeClass("btn-outline-primary").addClass("btn-primary");
                            btn.text("👍 Unlike");
                        } else {
                            btn.removeClass("btn-primary").addClass("btn-outline-primary");
                            btn.text("👍 Like");
                        }

                        // Update likes count
                        likesCountSpan.text(data.likesCount);
                    },
                    error: function () {
                        alert("Could not update like. Try again.");
                    }
                });
            });
        });
    </script>
}
